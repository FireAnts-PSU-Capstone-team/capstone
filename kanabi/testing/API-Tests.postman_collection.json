{
	"info": {
		"_postman_id": "e4c6b6c0-d0d9-4306-96b7-77daa5cb0538",
		"name": "API-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Too Many Records",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02cf6052-7b54-473c-a903-5df5648e7edd",
						"exec": [
							"pm.test(\"Too Many Records Status Code\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"pm.test(\"Too Many Records Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Failed to decode JSON object\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    {\n\t\t\"Submission date\": \"01/01/20\",\n    \t\"Entity\": \"The Greenhouse1\",\n    \t\"DBA\": \"Boss Nass's1\",\n    \t\"Facility Address\": \"197 N Electric Ave\",\n    \t\"Facility Suite #\": \"\",\n    \t\"Facility Zip\": \"97202\",\n    \t\"Mailing Address\": \"101 NE Tabor Dr\",\n    \t\"MRL\": \"MRL48\",\n    \t\"Neighborhood Association\": \"Arbor Lodge\",\n    \t\"Compliance Region\": \"SE\",\n    \t\"Primary Contact First Name\": \"Ashley\",\n    \t\"Primary Contact Last Name\": \"Clark\",\n    \t\"Email\": \"ac@example.com\",\n    \t\"Phone\": \"971-245-0996\",\n    \t\"Endorse Type\": \"EX,CT\",\n    \t\"License Type\": \"MR\",\n    \t\"Repeat location?\": \"N\",\n    \t\"App complete?\": \"Y\",\n    \t\"Fee Schedule\": \"2020\",\n    \t\"Receipt No.\": 67,\n    \t\"Cash Amount\": \"$1500\",\n    \t\"Check Amount\": \"0\",\n    \t\"Card Amount\": \"\",\n    \t\"Check No. / Approval Code\": \"512\",\n    \t\"MRL#\": \"MRL48\",\n    \t\"Notes\": \"\"\n    },\n    {\n    \t\"Submission date\": \"01/01/20\",\n    \t\"Entity\": \"The Greenhouse2\",\n    \t\"DBA\": \"Boss Nass's2\",\n    \t\"Facility Address\": \"198 N Electric Ave\",\n    \t\"Facility Suite #\": \"\",\n    \t\"Facility Zip\": \"97201\",\n    \t\"Mailing Address\": \"102 NE Tabor Dr\",\n    \t\"MRL\": \"MRL49\",\n    \t\"Neighborhood Association\": \"Arbor Lodge\",\n    \t\"Compliance Region\": \"SE\",\n    \t\"Primary Contact First Name\": \"Ashley1\",\n    \t\"Primary Contact Last Name\": \"Clark1\",\n    \t\"Email\": \"ac@example22.com\",\n    \t\"Phone\": \"971-245-0995\",\n    \t\"Endorse Type\": \"EX,CT\",\n    \t\"License Type\": \"MR\",\n    \t\"Repeat location?\": \"N\",\n    \t\"App complete?\": \"Y\",\n    \t\"Fee Schedule\": \"2020\",\n    \t\"Receipt No.\": 67,\n\t    \"Cash Amount\": \"$1500\",\n\t    \"Check Amount\": \"0\",\n\t    \"Card Amount\": \"\",\n\t    \"Check No. / Approval Code\": \"512\",\n    \t\"MRL#\": \"MRL48\",\n\t    \"Notes\": \"\"\n    }\n}\n"
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Incomplete Intake Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28d4ad5f-47ba-454f-9d1c-b43d848dad21",
						"exec": [
							"pm.test(\"Tncomplete Intake Status Code\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"pm.test(\"Incomplete Intake Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Failed to decode JSON object\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Submission date\": \"01/01/18\",\n  \"Entity\": \"The invalid house\",\n  \"DBA\": \"invalid Boss Nass's\",\n  \"Facility Address\": \"197 N invalid Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97207\",\n  \"Mailing Address\": \"100 NE invalid Dr\",\n  \"MRL\": \"MRL48\",\n  \"Neighborhood Association\": \"invalid Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact First Name\": \"Ashley-invalid\",\n  \"Primary Contact Last Name\": \"Clarks\",\n  \"Email\": \"ac@invalid.com\",\n  \"Phone\": \"971-111-0996\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n\"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Empty Intake Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "866d6421-db3b-4468-a41b-76d76dea3bd4",
						"exec": [
							"pm.test(\"Incomplete Intake Request\", function () {",
							"    pm.response.to.have.status(500);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Single Intake Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48695b91-2fda-47ed-82c3-5af6e37c5dd4",
						"exec": [
							"pm.test(\"Single Intake Request\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"PUT completed\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"row\": 222,\n  \"Submission date\": \"01/01/20\",\n  \"Entity\": \"The Greenhouse Gases\",\n  \"DBA\": \"Boss Nass's\",\n  \"Facility Address\": \"197 N Electric Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97204\",\n  \"Mailing Address\": \"100 NE Tabor Dr\",\n  \"MRL\": \"MRL51\",\n  \"Neighborhood Association\": \"Arbor Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact Name (first)\": \"Ashley\",\n  \"Primary Contact Name (last)\": \"Clark\",\n  \"Email\": \"ac@example.com\",\n  \"Phone\": \"971-245-0996\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n  \"Fee Schedule\": \"2020\",\n  \"Receipt No.\": 22,\n  \"Cash Amount\": \"$1500\",\n  \"Check Amount\": \"0\",\n  \"Card Amount\": \"\",\n  \"Check No. / Approval Code\": \"512\",\n  \"MRL#\": \"MRL48\",\n  \"Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Duplicate Intake",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "245d969b-0890-4f1c-a393-40c0bbbc8bd4",
						"exec": [
							"pm.test(\"Duplicate Intake Request\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('fail_row');",
							"}",
							");",
							"pm.test(\"Duplicate Intake Status Code\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"row\": 222,\n  \"Submission date\": \"01/01/20\",\n  \"Entity\": \"The Greenhouse Gases\",\n  \"DBA\": \"Boss Nass's\",\n  \"Facility Address\": \"197 N Electric Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97204\",\n  \"Mailing Address\": \"100 NE Tabor Dr\",\n  \"MRL\": \"MRL51\",\n  \"Neighborhood Association\": \"Arbor Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact Name (first)\": \"Ashley\",\n  \"Primary Contact Name (last)\": \"Clark\",\n  \"Email\": \"ac@example.com\",\n  \"Phone\": \"971-245-0996\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n  \"Fee Schedule\": \"2020\",\n  \"Receipt No.\": 22,\n  \"Cash Amount\": \"$1500\",\n  \"Check Amount\": \"0\",\n  \"Card Amount\": \"\",\n  \"Check No. / Approval Code\": \"512\",\n  \"MRL#\": \"MRL48\",\n  \"Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Multi Intake",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9d0672a7-1c56-4320-853c-a99d1eaeedab",
						"exec": [
							"var value = pm.environment.get(\"inc\");",
							"",
							"pm.environment.set(\"inc\", value+1);",
							"",
							"pm.test(\"Multi Intake Request\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"PUT completed\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "40965406-c334-493f-aaba-daab4f6ee2d1",
						"exec": [
							"var inc = pm.environment.get(\"inc\");",
							"",
							"if( !inc) {",
							"    pm.environment.set(\"inc\", 1);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"row\": {{inc}},\n  \"Submission date\": \"01/01/20\",\n  \"Entity\": \"The Greenhouse Gases{{inc}}\",\n  \"DBA\": \"Boss{{inc}}\",\n  \"Facility Address\": \"{{inc}} N Electric Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97{{inc}}\",\n  \"Mailing Address\": \"{{inc}} NE Tabor Dr\",\n  \"MRL\": \"MRL{{inc}}\",\n  \"Neighborhood Association\": \"Arbor Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact Name (first)\": \"Ashley{{inc}}\",\n  \"Primary Contact Name (last)\": \"Clark{{inc}}\",\n  \"Email\": \"ac@example{{inc}}.com\",\n  \"Phone\": \"971-245-345{{inc}}\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n  \"Fee Schedule\": \"2020\",\n  \"Receipt No.\": \"{{inc}}\",\n  \"Cash Amount\": \"$1500\",\n  \"Check Amount\": \"0\",\n  \"Card Amount\": \"\",\n  \"Check No. / Approval Code\": \"{{inc}}\",\n  \"MRL#\": \"MRL{{inc}}\",\n  \"Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1205507-59c5-4e37-a692-a0217f408a89",
						"exec": [
							"pm.test(\"Invalid URL Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Invalid URL Response\", function () {",
							"     pm.expect(pm.response.text()).to.include(\"The requested endpoint does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://localhost/foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"foo"
					]
				},
				"description": "Tests for bad URL"
			},
			"response": []
		},
		{
			"name": "File Intake",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0db97dd6-f043-40c8-b63a-64f5722245a9",
						"exec": [
							"// This test requires POSTing the sample.xlsx file found in the source code repository's resources directory.",
							"// The link to this file does not ship across export/import instances, and so will need to be",
							"// set by the test client. In the Body tab, set the file argument to the sample.xlsx file in the repository,",
							"// then uncomment the following tests.",
							"",
							"// pm.test(\"File Intake Status Code\", function () {",
							"//     pm.response.to.have.status(200);",
							"// }",
							"// )",
							"",
							"// pm.test(\"File Intake Response\", function () {",
							"//     pm.expect(pm.response.text()).to.include(\"File processed successfully\");",
							"// }",
							"// )",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/home/andrew/projects/capstone/kanabi/resources/sample.xlsx"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "768beccc-1464-42fc-aace-91c09d1ee877",
						"exec": [
							"pm.test(\"Invalid URL Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Invalid URL Response\", function () {",
							"     pm.expect(pm.response.text()).to.include(\"The requested endpoint does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://localhost/foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"foo"
					]
				},
				"description": "Tests for bad URL"
			},
			"response": []
		},
		{
			"name": "No File Provided",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa4fc114-3f6a-4fe9-af14-1df1793f0273",
						"exec": [
							"pm.test(\"No File Status Code\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"pm.test(\"No File Output\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"No file listed\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://localhost/load?file=",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "file",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Query Only Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f4f979b3-cbc3-4bfd-9ae0-4a08536f7af7",
						"exec": [
							"pm.test(\"Test Query Only Table Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Only Table Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('app_complete');",
							"    pm.expect(json).to.have.property('card_amount');",
							"    pm.expect(json).to.have.property('cash_amount');",
							"    pm.expect(json).to.have.property('check_amount');",
							"    pm.expect(json).to.have.property('check_num');",
							"    pm.expect(json).to.have.property('compliance_region');",
							"    pm.expect(json).to.have.property('dba');",
							"    pm.expect(json).to.have.property('email');",
							"    pm.expect(json).to.have.property('endorse_type');",
							"    pm.expect(json).to.have.property('entity');",
							"    pm.expect(json).to.have.property('facility_address');",
							"    pm.expect(json).to.have.property('facility_suite');",
							"    pm.expect(json).to.have.property('facility_zip');",
							"    pm.expect(json).to.have.property('fee_schedule');",
							"    pm.expect(json).to.have.property('license_type');",
							"    pm.expect(json).to.have.property('mailing_address');",
							"    pm.expect(json).to.have.property('mrl');",
							"    pm.expect(json).to.have.property('mrl_num');",
							"    pm.expect(json).to.have.property('neighborhood_association');",
							"    pm.expect(json).to.have.property('notes');",
							"    pm.expect(json).to.have.property('phone');",
							"    pm.expect(json).to.have.property('primary_contact_first_name');",
							"    pm.expect(json).to.have.property('primary_contact_last_name');",
							"    pm.expect(json).to.have.property('receipt_num');",
							"    pm.expect(json).to.have.property('repeat_license');",
							"    pm.expect(json).to.have.property('row');",
							"    pm.expect(json).to.have.property('submission_date');",
							"    pm.expect(json).to.have.property('validation_errors');",
							"}",
							")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Table and Columns",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b3536205-ad89-435c-be57-af068815fcd8",
						"exec": [
							"pm.test(\"Test Query Table and Columns Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Table and Columns Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('row');",
							"    pm.expect(json).to.have.property('submission_date');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"submission_date\",\n    \"row\"\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query And",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "98a8acbb-1866-4286-950b-0499bbae0f51",
						"exec": [
							"pm.test(\"Test Query And Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query And Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('dba');",
							"    pm.expect(json).to.have.property('mrl');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"mrl\"\n  ],\n  \"where\": {\n    \"and\": [\n      {\n        \"column\": \"mrl\",\n        \"op\": \"=\",\n        \"operand\": \"MRL1\"\n      },\n      {\n        \"column\": \"row\",\n        \"op\": \"<\",\n        \"operand\": 5\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Equals",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "99a82fa3-ee04-4c1e-b30f-47f61c7f516a",
						"exec": [
							"pm.test(\"Test Query Equals Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Equals Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('app_complete');",
							"    pm.expect(json).to.have.property('neighborhood_association');",
							"    pm.expect(json).to.have.property('row');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"row\",\n    \"app_complete\",\n    \"neighborhood_association\"\n  ],\n  \"where\": {\n    \"column\": \"mrl\",\n    \"op\": \"=\",\n    \"operand\": \"MRL51\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query or 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "186b060b-b4ac-42c4-a529-18b9ba403b3c",
						"exec": [
							"pm.test(\"Test Query Or Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Or Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('entity');",
							"    pm.expect(json).to.have.property('mrl');",
							"    pm.expect(json).to.have.property('submission_date');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"entity\",\n    \"mrl\",\n    \"submission_date\"\n  ],\n  \"where\": {\n    \"or\": [\n      {\n        \"column\": \"mrl\",\n        \"op\": \"=\",\n        \"operand\": \"MRL20\"\n      },\n      {\n        \"column\": \"submission_date\",\n        \"op\": \">\",\n        \"operand\": \"1/1/2010\"\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail No Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f3747922-552e-4b8b-bc61-34ce629eaa1a",
						"exec": [
							"pm.test(\"Test Query Fail No Table\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail No Table Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: No table named in request\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"something\": \"x\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Columns Not Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ccf6a4a9-7971-414c-a5fb-1738d3098362",
						"exec": [
							"pm.test(\"Test Query Fail Columns Not Array\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Columns Not Array Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Columns must be present as list in request body\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": \"dba\"\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Invalid Column",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0b24dc00-a7bf-4d41-9def-5c2262013775",
						"exec": [
							"pm.test(\"Test Query Invalid Column\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid Column Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Column x not in known list\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"x\"\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Invalid and 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e4b89a28-51ab-40f4-8046-b0b8c98bce8d",
						"exec": [
							"pm.test(\"Test Query Fail Invalid And 1\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid And 1 Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Found an AND or OR construct with invalid structure.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"mrl\"\n  ],\n  \"where\": {\n    \"and\": [\n      {\n        \"column\": \"mrl\",\n        \"op\": \"=\",\n        \"operand\": \"MRL20\"\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Invalid Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "349c06dc-eba1-40ca-bc23-b7e77451a805",
						"exec": [
							"pm.test(\"Test Query Fail Invalid Table\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid Table Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Requested table not found\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"x\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Invalid Where",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe4d7d81-72eb-4748-b54d-2c29635b8fe2",
						"exec": [
							"pm.test(\"Test Query Fail Invalid Where\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid Where Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: No operation requested in block\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"mrl\"\n  ],\n  \"where\": {\n    \"x\": 1\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "223d34c5-e3ed-48af-a616-2fe5626c4382",
						"exec": [
							"pm.test(\"Invalid URL Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Invalid URL Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"The requested endpoint does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"foo"
					]
				},
				"description": "Tests for bad URL"
			},
			"response": []
		},
		{
			"name": "Bad Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d530c6a1-d618-4763-8994-905d9f6382cf",
						"exec": [
							"pm.test(\"Bad Table Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Bad Table Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Table foo does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/list?table=foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "foo"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Metadata Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc2d730a-fe13-40da-af13-ba9de1bee077",
						"exec": [
							"pm.test(\"Get Metadata\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/list?table=metadata",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "metadata"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Intake Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "063f30e7-d33b-478c-9467-952e41ccf57d",
						"exec": [
							"pm.test(\"Get Intake\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Metadata Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2c165b2e-edfd-4cbf-973e-fa439715e72d",
						"exec": [
							"pm.test(\"Get Metadata Endpont\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/metadata",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"metadata"
					]
				}
			},
			"response": []
		},
		{
			"name": "Base Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0bb7de01-937f-4da4-944f-f2152f928b8f",
						"exec": [
							"pm.test(\"Base Endpont\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost",
					"protocol": "https",
					"host": [
						"localhost"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}