{
	"info": {
		"_postman_id": "2a478a66-c636-4bda-bd91-bdc4314cdbb0",
		"name": "API-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Make admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6ce73ff4-6d90-4ea8-bec1-f88ca38bd0f6",
						"exec": [
							"pm.test(\"Make Initial Admin\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Make Initial Admin Schema\", function () {",
							"    var json = pm.response.json();",
							"    pm.expect(json).to.have.property('user');",
							"    var return_msg = json['return_msg'];",
							"    // pm.expect(false);",
							"    console.log(return_msg);",
							"    pm.expect(return_msg).to.eql(\"OK\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "a@gmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "xef",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://localhost:443/makeadmin",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"makeadmin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5ce2406-b5d4-4e6a-b5a0-e97948d94cce",
						"exec": [
							"pm.test(\"Signup\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Signup Response Schema\", function () {",
							"    var json = pm.response.json();",
							"    pm.expect(json).to.have.property('user');",
							"    var return_msg = json['return_msg'];",
							"    pm.expect(return_msg).to.eql(\"OK\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "joseph@gmail.com",
							"type": "text"
						},
						{
							"key": "name",
							"value": "joseph",
							"type": "text"
						},
						{
							"key": "password",
							"value": "pwd",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://localhost:443/signup",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7999786c-d9df-4d8e-a786-952e4ec4acd3",
						"exec": [
							"pm.test(\"Login\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Login Response Schema\", function () {",
							"    var json = pm.response.json();",
							"    pm.expect(json).to.have.property('user');",
							"    var return_msg = json['return_msg'];",
							"    pm.expect(return_msg).to.eql(\"OK\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "joseph@gmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "pwd",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://localhost:443/login",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Too Many Records",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bd3cbd4c-e9e6-402f-9343-1946cd758554",
						"exec": [
							"// pm.test(\"Too Many Records Status Code\", function () {",
							"//     pm.response.to.have.status(400);",
							"// }",
							"// )",
							"pm.test(\"Too Many Records Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Failed to decode JSON object\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    {\n\t\t\"Submission date\": \"01/01/20\",\n    \t\"Entity\": \"The Greenhouse1\",\n    \t\"DBA\": \"Boss Nass's1\",\n    \t\"Facility Address\": \"197 N Electric Ave\",\n    \t\"Facility Suite #\": \"\",\n    \t\"Facility Zip\": \"97202\",\n    \t\"Mailing Address\": \"101 NE Tabor Dr\",\n    \t\"MRL\": \"MRL48\",\n    \t\"Neighborhood Association\": \"Arbor Lodge\",\n    \t\"Compliance Region\": \"SE\",\n    \t\"Primary Contact First Name\": \"Ashley\",\n    \t\"Primary Contact Last Name\": \"Clark\",\n    \t\"Email\": \"ac@example.com\",\n    \t\"Phone\": \"971-245-0996\",\n    \t\"Endorse Type\": \"EX,CT\",\n    \t\"License Type\": \"MR\",\n    \t\"Repeat location?\": \"N\",\n    \t\"App complete?\": \"Y\",\n    \t\"Fee Schedule\": \"2020\",\n    \t\"Receipt No.\": 67,\n    \t\"Cash Amount\": \"$1500\",\n    \t\"Check Amount\": \"0\",\n    \t\"Card Amount\": \"\",\n    \t\"Check No. / Approval Code\": \"512\",\n    \t\"MRL#\": \"MRL48\",\n    \t\"Notes\": \"\"\n    },\n    {\n    \t\"Submission date\": \"01/01/20\",\n    \t\"Entity\": \"The Greenhouse2\",\n    \t\"DBA\": \"Boss Nass's2\",\n    \t\"Facility Address\": \"198 N Electric Ave\",\n    \t\"Facility Suite #\": \"\",\n    \t\"Facility Zip\": \"97201\",\n    \t\"Mailing Address\": \"102 NE Tabor Dr\",\n    \t\"MRL\": \"MRL49\",\n    \t\"Neighborhood Association\": \"Arbor Lodge\",\n    \t\"Compliance Region\": \"SE\",\n    \t\"Primary Contact First Name\": \"Ashley1\",\n    \t\"Primary Contact Last Name\": \"Clark1\",\n    \t\"Email\": \"ac@example22.com\",\n    \t\"Phone\": \"971-245-0995\",\n    \t\"Endorse Type\": \"EX,CT\",\n    \t\"License Type\": \"MR\",\n    \t\"Repeat location?\": \"N\",\n    \t\"App complete?\": \"Y\",\n    \t\"Fee Schedule\": \"2020\",\n    \t\"Receipt No.\": 67,\n\t    \"Cash Amount\": \"$1500\",\n\t    \"Check Amount\": \"0\",\n\t    \"Card Amount\": \"\",\n\t    \"Check No. / Approval Code\": \"512\",\n    \t\"MRL#\": \"MRL48\",\n\t    \"Notes\": \"\"\n    }\n}\n"
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Incomplete Intake Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b5dce516-7451-451b-908a-725279fa5b56",
						"exec": [
							"pm.test(\"Incomplete Intake Status Code\", function () {",
							"    pm.response.to.have.status(500);",
							"}",
							")",
							"pm.test(\"Incomplete Intake Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Failed to decode JSON object\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Submission date\": \"01/01/18\",\n  \"Entity\": \"The invalid house\",\n  \"DBA\": \"invalid Boss Nass's\",\n  \"Facility Address\": \"197 N invalid Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97207\",\n  \"Mailing Address\": \"100 NE invalid Dr\",\n  \"MRL\": \"MRL48\",\n  \"Neighborhood Association\": \"invalid Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact First Name\": \"Ashley-invalid\",\n  \"Primary Contact Last Name\": \"Clarks\",\n  \"Email\": \"ac@invalid.com\",\n  \"Phone\": \"971-111-0996\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n\"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Empty Intake Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7df6b3a6-c89a-4fc6-b2d1-8449f4a79a87",
						"exec": [
							"pm.test(\"Incomplete Intake Request\", function () {",
							"    pm.response.to.have.status(500);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Single Intake Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7455a20-7bc6-4329-86c2-a7a8872e07a0",
						"exec": [
							"pm.test(\"Single Intake Request\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"PUT completed\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"row\": 222,\n  \"Submission date\": \"01/01/20\",\n  \"Entity\": \"The Greenhouse Gases\",\n  \"DBA\": \"Boss Nass's\",\n  \"Facility Address\": \"197 N Electric Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97204\",\n  \"Mailing Address\": \"100 NE Tabor Dr\",\n  \"MRL\": \"MRL51\",\n  \"Neighborhood Association\": \"Arbor Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact Name (first)\": \"Ashley\",\n  \"Primary Contact Name (last)\": \"Clark\",\n  \"Email\": \"ac@example.com\",\n  \"Phone\": \"971-245-0996\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n  \"Fee Schedule\": \"2020\",\n  \"Receipt No.\": 22,\n  \"Cash Amount\": \"$1500\",\n  \"Check Amount\": \"0\",\n  \"Card Amount\": \"\",\n  \"Check No. / Approval Code\": \"512\",\n  \"MRL#\": \"MRL48\",\n  \"Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Duplicate Intake",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee941892-0702-47b2-8b59-c73c4c584b01",
						"exec": [
							"pm.test(\"Duplicate Intake Request\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('fail_row');",
							"}",
							");",
							"pm.test(\"Duplicate Intake Status Code\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"row\": 222,\n  \"Submission date\": \"01/01/20\",\n  \"Entity\": \"The Greenhouse Gases\",\n  \"DBA\": \"Boss Nass's\",\n  \"Facility Address\": \"197 N Electric Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97204\",\n  \"Mailing Address\": \"100 NE Tabor Dr\",\n  \"MRL\": \"MRL51\",\n  \"Neighborhood Association\": \"Arbor Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact Name (first)\": \"Ashley\",\n  \"Primary Contact Name (last)\": \"Clark\",\n  \"Email\": \"ac@example.com\",\n  \"Phone\": \"971-245-0996\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n  \"Fee Schedule\": \"2020\",\n  \"Receipt No.\": 22,\n  \"Cash Amount\": \"$1500\",\n  \"Check Amount\": \"0\",\n  \"Card Amount\": \"\",\n  \"Check No. / Approval Code\": \"512\",\n  \"MRL#\": \"MRL48\",\n  \"Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Multi Intake",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0e2f8f72-3d68-40f9-a921-5df12f6c6298",
						"exec": [
							"var value = pm.environment.get(\"inc\");",
							"",
							"pm.environment.set(\"inc\", value+1);",
							"",
							"pm.test(\"Multi Intake Request\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"PUT completed\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8e8cadb3-0ff8-4879-958c-a707913c3f25",
						"exec": [
							"var inc = pm.environment.get(\"inc\");",
							"",
							"if( !inc) {",
							"    pm.environment.set(\"inc\", 1);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"row\": {{inc}},\n  \"Submission date\": \"01/01/20\",\n  \"Entity\": \"The Greenhouse Gases{{inc}}\",\n  \"DBA\": \"Boss{{inc}}\",\n  \"Facility Address\": \"{{inc}} N Electric Ave\",\n  \"Facility Suite #\": \"\",\n  \"Facility Zip\": \"97{{inc}}\",\n  \"Mailing Address\": \"{{inc}} NE Tabor Dr\",\n  \"MRL\": \"MRL{{inc}}\",\n  \"Neighborhood Association\": \"Arbor Lodge\",\n  \"Compliance Region\": \"SE\",\n  \"Primary Contact Name (first)\": \"Ashley{{inc}}\",\n  \"Primary Contact Name (last)\": \"Clark{{inc}}\",\n  \"Email\": \"ac@example{{inc}}.com\",\n  \"Phone\": \"971-245-345{{inc}}\",\n  \"Endorse Type\": \"EX,CT\",\n  \"License Type\": \"MR\",\n  \"Repeat location?\": \"N\",\n  \"App complete?\": \"Y\",\n  \"Fee Schedule\": \"2020\",\n  \"Receipt No.\": \"{{inc}}\",\n  \"Cash Amount\": \"$1500\",\n  \"Check Amount\": \"0\",\n  \"Card Amount\": \"\",\n  \"Check No. / Approval Code\": \"{{inc}}\",\n  \"MRL#\": \"MRL{{inc}}\",\n  \"Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f3b354ee-9cad-4ded-914a-bef5a5831ca1",
						"exec": [
							"pm.test(\"Invalid URL Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Invalid URL Response\", function () {",
							"     pm.expect(pm.response.text()).to.include(\"The requested endpoint does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://localhost/foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"foo"
					]
				},
				"description": "Tests for bad URL"
			},
			"response": []
		},
		{
			"name": "File Intake",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5f630fb-3c85-490b-b259-dcd2bc415f5d",
						"exec": [
							"// This test requires POSTing the sample.xlsx file found in the source code repository's resources directory.",
							"// The link to this file does not ship across export/import instances, and so will need to be",
							"// set by the test client. In the Body tab, set the file argument to the sample.xlsx file in the repository,",
							"// then uncomment the following tests.",
							"",
							"// pm.test(\"File Intake Status Code\", function () {",
							"//     pm.response.to.have.status(200);",
							"// }",
							"// )",
							"",
							"// pm.test(\"File Intake Response\", function () {",
							"//     pm.expect(pm.response.text()).to.include(\"File processed successfully\");",
							"// }",
							"// )",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/home/andrew/projects/capstone/kanabi/resources/sample.xlsx"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/load",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					]
				},
				"description": "Update"
			},
			"response": []
		},
		{
			"name": "Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "add2da34-73fa-447a-af25-0c6b4e136b94",
						"exec": [
							"pm.test(\"Invalid URL Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Invalid URL Response\", function () {",
							"     pm.expect(pm.response.text()).to.include(\"The requested endpoint does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://localhost/foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"foo"
					]
				},
				"description": "Tests for bad URL"
			},
			"response": []
		},
		{
			"name": "No Table Listed in File Upload",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c125977a-7458-4ce9-8784-bce4df70cf00",
						"exec": [
							"pm.test(\"No Table In Upload Status Code\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"pm.test(\"No Table In Upload Output\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Table name not specified\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://localhost/load",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"load"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Query Only Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a10d2c7e-6000-4c4a-ab64-e426bb93d417",
						"exec": [
							"pm.test(\"Test Query Only Table Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Only Table Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('app_complete');",
							"    pm.expect(json).to.have.property('card_amount');",
							"    pm.expect(json).to.have.property('cash_amount');",
							"    pm.expect(json).to.have.property('check_amount');",
							"    pm.expect(json).to.have.property('check_num');",
							"    pm.expect(json).to.have.property('compliance_region');",
							"    pm.expect(json).to.have.property('dba');",
							"    pm.expect(json).to.have.property('email');",
							"    pm.expect(json).to.have.property('endorse_type');",
							"    pm.expect(json).to.have.property('entity');",
							"    pm.expect(json).to.have.property('facility_address');",
							"    pm.expect(json).to.have.property('facility_suite');",
							"    pm.expect(json).to.have.property('facility_zip');",
							"    pm.expect(json).to.have.property('fee_schedule');",
							"    pm.expect(json).to.have.property('license_type');",
							"    pm.expect(json).to.have.property('mailing_address');",
							"    pm.expect(json).to.have.property('mrl');",
							"    pm.expect(json).to.have.property('mrl_num');",
							"    pm.expect(json).to.have.property('neighborhood_association');",
							"    pm.expect(json).to.have.property('notes');",
							"    pm.expect(json).to.have.property('phone');",
							"    pm.expect(json).to.have.property('primary_contact_first_name');",
							"    pm.expect(json).to.have.property('primary_contact_last_name');",
							"    pm.expect(json).to.have.property('receipt_num');",
							"    pm.expect(json).to.have.property('repeat_license');",
							"    pm.expect(json).to.have.property('row');",
							"    pm.expect(json).to.have.property('submission_date');",
							"    pm.expect(json).to.have.property('validation_errors');",
							"}",
							")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Table and Columns",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1ce59180-6323-4c7c-9f84-5b2df06ec8cc",
						"exec": [
							"pm.test(\"Test Query Table and Columns Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Table and Columns Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('row');",
							"    pm.expect(json).to.have.property('submission_date');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"submission_date\",\n    \"row\"\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query And",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5bbbb2a4-d00e-4e36-893d-b02d4903d209",
						"exec": [
							"pm.test(\"Test Query And Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query And Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('dba');",
							"    pm.expect(json).to.have.property('mrl');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"mrl\"\n  ],\n  \"where\": {\n    \"and\": [\n      {\n        \"column\": \"mrl\",\n        \"op\": \"=\",\n        \"operand\": \"MRL1\"\n      },\n      {\n        \"column\": \"row\",\n        \"op\": \"<\",\n        \"operand\": 5\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Equals",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d79e973d-52ab-4c92-9979-c01d2a256400",
						"exec": [
							"pm.test(\"Test Query Equals Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Equals Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('app_complete');",
							"    pm.expect(json).to.have.property('neighborhood_association');",
							"    pm.expect(json).to.have.property('row');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"row\",\n    \"app_complete\",\n    \"neighborhood_association\"\n  ],\n  \"where\": {\n    \"column\": \"mrl\",\n    \"op\": \"=\",\n    \"operand\": \"MRL51\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query or 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd9579fe-81b9-456a-9bf5-026088d53e9e",
						"exec": [
							"pm.test(\"Test Query Or Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Or Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('entity');",
							"    pm.expect(json).to.have.property('mrl');",
							"    pm.expect(json).to.have.property('submission_date');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"entity\",\n    \"mrl\",\n    \"submission_date\"\n  ],\n  \"where\": {\n    \"or\": [\n      {\n        \"column\": \"mrl\",\n        \"op\": \"=\",\n        \"operand\": \"MRL51\"\n      },\n      {\n        \"column\": \"submission_date\",\n        \"op\": \">\",\n        \"operand\": \"1/1/2010\"\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail No Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0fbbc011-6923-4bf7-be96-b5d92a97665b",
						"exec": [
							"pm.test(\"Test Query Fail No Table\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail No Table Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Table name not supplied\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"something\": \"x\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Columns Not Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "021e7c45-e342-4d08-8270-5425b4b60c2e",
						"exec": [
							"pm.test(\"Test Query Fail Columns Not Array\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Columns Not Array Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Columns must be present as list in request body\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": \"dba\"\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Invalid Column",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef4ac65f-45ae-4b28-b4aa-d25f783e82f9",
						"exec": [
							"pm.test(\"Test Query Invalid Column\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid Column Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Column x not in known list\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"x\"\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Invalid and 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4fa54725-ae9c-49cc-bf0a-5a45ff27fc69",
						"exec": [
							"pm.test(\"Test Query Fail Invalid And 1\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid And 1 Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Found an AND or OR construct with invalid structure.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"mrl\"\n  ],\n  \"where\": {\n    \"and\": [\n      {\n        \"column\": \"mrl\",\n        \"op\": \"=\",\n        \"operand\": \"MRL20\"\n      }\n    ]\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Invalid Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cace0d3-41f6-4e7a-9b19-4228a2c8e602",
						"exec": [
							"pm.test(\"Test Query Fail Invalid Table\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid Table Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: Table x does not match known list\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"x\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Test Query Fail Invalid Where",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b2b7671e-fffc-45d4-8091-a1e84a55ecd8",
						"exec": [
							"pm.test(\"Test Query Fail Invalid Where\", function () {",
							"    pm.response.to.have.status(400);",
							"}",
							")",
							"",
							"pm.test(\"Test Query Fail Invalid Where Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Error: No operation requested in block\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"table\": \"intake\",\n  \"columns\": [\n    \"dba\",\n    \"mrl\"\n  ],\n  \"where\": {\n    \"x\": 1\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					]
				},
				"description": "Invalid Intake, missing data"
			},
			"response": []
		},
		{
			"name": "Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e8c108d-b2e8-4336-93cc-1a08090dc114",
						"exec": [
							"pm.test(\"Invalid URL Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Invalid URL Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"The requested endpoint does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"foo"
					]
				},
				"description": "Tests for bad URL"
			},
			"response": []
		},
		{
			"name": "Bad Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1aa946a5-b7cf-46e5-b362-91e01a5f0a9b",
						"exec": [
							"pm.test(\"Bad Table Status Code\", function () {",
							"    pm.response.to.have.status(404);",
							"}",
							")",
							"pm.test(\"Bad Table Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Table foo does not exist.\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/list?table=foo",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "foo"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Metadata Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fbaa479d-7b79-4184-8d28-d97b0c27cd9b",
						"exec": [
							"pm.test(\"Get Metadata\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/list?table=metadata",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "metadata"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Intake Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "710052ba-3f27-4827-bed5-82d75c05217c",
						"exec": [
							"pm.test(\"Get Intake\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Get Intake Schema\", function () {",
							"    var json = pm.response.json()[0];",
							"    pm.expect(json).to.have.property('entity');",
							"    pm.expect(json).to.have.property('mrl');",
							"    pm.expect(json).to.have.property('submission_date');",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost/list?table=intake",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "intake"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Metadata Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7ea56c6f-da5f-420b-a89c-71192107d635",
						"exec": [
							"pm.test(\"Get Metadata Endpont\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost/metadata",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"path": [
						"metadata"
					]
				}
			},
			"response": []
		},
		{
			"name": "Base Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f60a3ba5-6793-495c-9648-d58f63ee78fa",
						"exec": [
							"pm.test(\"Base Endpont\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"pm.test(\"Signup Response Schema\", function () {",
							"    var json = pm.response.json();",
							"    pm.expect(json).to.have.property('user');",
							"    var return_msg = json['return_msg'];",
							"    pm.expect(return_msg).to.eql(\"Hello World\");",
							"}",
							")",
							"",
							"// For now, reports and violations are not supported. Those tests are included for reference, but are not working. We skip them here",
							"postman.setNextRequest('Logout');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost",
					"protocol": "https",
					"host": [
						"localhost"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single Reports Upload",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7270b03f-67eb-4810-a074-554201e4a548",
						"exec": [
							"pm.test(\"Single Reports Upload Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"PUT completed\");",
							"}",
							")",
							"pm.test(\"Reports Upload Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Date\": \"2/22/2016\",\n  \"Method\": \"Phone\",\n  \"Intake Person\": \"\",\n  \"RP (Name)\": \"Benjamin Calapa\",\n  \"RP (Contact Info)\": \"503-807-3998\",\n  \"Concern\": \"Next to a park. People smoking in the park next to the dispensary. Causing singifcant livability and crime problems. \",\n  \"Location Name\": \"Exodus wellness center\",\n  \"Location Address\": \" 16211 SE Powell Blvd\",\n  \"MRL?\": \"51\",\n  \"Action Taken\":  \"Information\",\n  \"Status\": \"Closed\",\n  \"Status Date\": \"6/27/2016\",\n  \"Additional Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:443/load?table=reports",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "reports"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reports Upload Persisted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b88f78da-8985-4e62-9be0-e5dbd637a1b8",
						"exec": [
							"pm.test(\"Reports Retrieval Response\", function () {",
							"    pm.expect(pm.response.json()[0]).to.have.property('concern');",
							"}",
							")",
							"pm.test(\"Reports Retrieval Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:443/list?table=reports",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "reports"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single Violations Upload",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65f5f3d0-28d3-4f65-8aeb-b2c63349fa0a",
						"exec": [
							"pm.test(\"Single Violations Upload Response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"PUT completed\");",
							"}",
							")",
							"pm.test(\"Violations Upload Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"DBA\": \"Green Buds\",\n  \"Address\": \"10929 NE Sandy\",\n  \"MRL#\": \"359, 409\",\n  \"License Type\": \"MD\",\n  \"Violation sent date\": \"7/27/2016\",\n  \"Original Violation Amount\": \"$5,000\",\n  \"Admin Rvw Decision Date\": \"\",\n  \"Admin Rvw Violation Amount\": \"\",\n  \"Certified #\": \"\",\n  \"Certified receipt returned\": \"\",\n  \"Date paid/ Waived\": \"5/16/2017\",\n  \"Receipt No.\": \"1068\",\n  \"Cash Amount\": \"\",\n  \"Check Amount\": \"$5,000\",\n  \"Card Amount\": \"\",\n  \"Check No. / Approval Code\": \"651103600\",\n  \"Notes\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:443/load?table=violations",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"load"
					],
					"query": [
						{
							"key": "table",
							"value": "violations"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Violations Upload Persisted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b95785bc-71c1-4ff9-9def-6b944cb4cbc8",
						"exec": [
							"pm.test(\"Violations Retrieval Response\", function () {",
							"    pm.expect(pm.response.json()[0]).to.have.property('certified_receipt_returned');",
							"}",
							")",
							"pm.test(\"Violations Retrieval Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://localhost:443/list?table=violations",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"list"
					],
					"query": [
						{
							"key": "table",
							"value": "violations"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Non-Admin User Can't Access /admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "30a5c2b7-d8b7-4a4a-a063-7c2120f5e81e",
						"exec": [
							"pm.test(\"Admin Endpoint for Non-Admin User Status\", function () {",
							"    pm.response.to.have.status(403);",
							"}",
							")",
							"",
							"pm.test(\"Admin Endpoint for Non-Admin User Status Response Schema\", function () {",
							"    var json = pm.response.json();",
							"    var entry = json[\"return_msg\"];",
							"    pm.expect(entry).to.eql(\"User must be logged in as admin to access this resource\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:443/admin/listusers",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"admin",
						"listusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "928c2773-a6cb-4c0d-a011-c2635c98dce1",
						"exec": [
							"pm.test(\"Logout\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Logout Response Schema\", function () {",
							"    var json = pm.response.json();",
							"    pm.expect(json).to.have.property('user');",
							"    var return_msg = json['return_msg'];",
							"    pm.expect(return_msg).to.eql(\"OK\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:443/logout",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login As Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa70e144-36f8-4025-813b-6c02bf67c3f8",
						"exec": [
							"pm.test(\"Admin Login Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Admin Login Response Schema\", function () {",
							"    var json = pm.response.json();",
							"    pm.expect(json).to.have.property('user');",
							"    var return_msg = json['return_msg'];",
							"    pm.expect(return_msg).to.eql(\"OK\");",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "a@gmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "xef",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://localhost:443/login",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin User Can Access /admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "310bcce7-b3d5-46bf-81bb-8938b684fdcc",
						"exec": [
							"pm.test(\"Admin Endpoint for Admin User Status\", function () {",
							"    pm.response.to.have.status(200);",
							"}",
							")",
							"",
							"pm.test(\"Admin Endpoint for Admin User Status Response Schema\", function () {",
							"    var json = pm.response.json();",
							"    pm.expect(json).to.have.property('1');",
							"    var entry = json['1'];",
							"    pm.expect(entry).to.have.property(\"email\");",
							"    pm.expect(entry).to.have.property(\"name\");",
							"    var is_admin = entry['is_admin'];",
							"    pm.expect(is_admin).to.eql(true);",
							"}",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:443/admin/listusers",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "443",
					"path": [
						"admin",
						"listusers"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}